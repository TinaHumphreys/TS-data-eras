[
  {
    "objectID": "notebooks/cost-per-ticket.html",
    "href": "notebooks/cost-per-ticket.html",
    "title": "",
    "section": "",
    "text": "url2 &lt;-\n  \"https://en.wikipedia.org/wiki/List_of_most-attended_concert_tours\"\n\nurl_bow2 &lt;- polite::bow(url2)\nurl_bow2\n\n&lt;polite session&gt; https://en.wikipedia.org/wiki/List_of_most-attended_concert_tours\n    User-agent: polite R package\n    robots.txt: 456 rules are defined for 33 bots\n   Crawl delay: 5 sec\n  The path is scrapable for this user-agent\n\nind_html2 &lt;-\n  polite::scrape(url_bow2) |&gt;  # scrape web page\n  rvest::html_nodes(\"table.wikitable\") |&gt; # pull out specific table\n  rvest::html_table(fill = TRUE)\n\nind_tab2 &lt;-\n  ind_html2[[2]] |&gt;\n  janitor::clean_names() |&gt;\n  dplyr::mutate(tickets_sold = as.numeric(str_replace(tickets_sold, \" million.*\", \"\")) * 1e6)\n\ntours_by_decade2 &lt;-\n  tours_by_decade |&gt;\n  dplyr::mutate(\n    tour_title = case_when(\n      tour_title == \"Music of the Spheres World Tour †\" ~ \"Music of the Spheres World Tour\",\n      tour_title == \"The Garth Brooks World Tour\" ~ \"The Garth Brooks World Tour (1996–1998)\",\n      tour_title == \"Steel Wheels Tour\" ~ \"Steel Wheels/Urban Jungle Tour\",\n      .default = tour_title\n    )\n  )\n\ncost_per &lt;-\n  left_join(ind_tab2, tours_by_decade2, join_by(tour_title))\n\n\ncost_per |&gt;\n  mutate(cost_per = adjusted_gross_in_2022_dollar / tickets_sold) |&gt;\n  ggplot(aes(x = year, y = cost_per)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "notebooks/taylor-live-performances.html",
    "href": "notebooks/taylor-live-performances.html",
    "title": "",
    "section": "",
    "text": "# To clean data\nlibrary(tidyverse)\nlibrary(janitor)\n\n# To scrape data\nlibrary(rvest)\nlibrary(httr)\nlibrary(polite)\n\n# To visualize data\nlibrary(ggplot2)\nlibrary(showtext)\nlibrary(treemapify)\nlibrary(taylor)\n\nfont_add_google(\"Abril Fatface\", \"abril-fatface\")\nfont_add_google(\"Lato\", \"lato\")\n\nshowtext::showtext_auto()\n\n\ntotal &lt;- sum(ind_tab$adjusted_gross_in_2023_dollar)\n\n# https://github.com/wilkox/treemapify/issues/37\ntreemap |&gt;\n  ggplot(\n    aes(\n      area = adjusted_gross_in_2023_dollar,\n      fill = title,\n      label = label,\n      xmin = xmin,\n      xmax = xmax,\n      ymin = ymin,\n      ymax = ymax\n    )\n  ) +\n  geom_treemap() +\n  ggfittext::geom_fit_text(\n    family = \"Lato\",\n    color = \"white\",\n    place = \"center\",\n    grow = TRUE,\n    rich = TRUE,\n    contrast = TRUE\n  ) +\n  labs(title = scales::dollar(total)) +\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      size = 80,\n      family = \"abril-fatface\",\n      hjust = 0.5\n    )\n  ) +\n  scale_fill_manual(values = c(\"#903345\",\n                               \"#867D80\",\n                               \"#1D1E3C\",\n                               \"#A9C7A5\",\n                               \"#F9C989\",\n                               \"#D4ACD1\"))\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Lato' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Lato' not found, will use 'sans' instead\n\n\n\n\n\n\nurl &lt;-\n  \"https://en.wikipedia.org/wiki/List_of_Taylor_Swift_live_performances\"\n\nurl_bow &lt;- polite::bow(url)\nurl_bow\n\nind_html &lt;-\n  polite::scrape(url_bow) |&gt;\n  rvest::html_nodes(\"table.wikitable\") |&gt;\n  rvest::html_table(fill = TRUE) \n\nind_tab &lt;- \n  ind_html[[1]] |&gt; \n  clean_names() |&gt; \n  dplyr::mutate(across(\n    c(adjusted_gross_in_2023_dollar,\n      gross,\n      attendance),\n    ~ as.numeric(str_replace_all(.x, \"[$,]\", \"\"))\n  )) |&gt; \n  dplyr::mutate(attendance = case_when(title == \"The Eras Tour\" ~ 10512000,\n                                       .default = attendance),\n                gross = case_when(title == \"The Eras Tour\" ~ 2200000000,\n                                       .default = gross),\n                adjusted_gross_in_2023_dollar = case_when(title == \"The Eras Tour\" ~ 2200000000,\n                                       .default = adjusted_gross_in_2023_dollar),\n                label = paste0(title,\"&lt;br&gt;&lt;span style='font-size:12pt'&gt;\", scales::dollar(adjusted_gross_in_2023_dollar), \"&lt;/span&gt;\"))\n\ntreemap &lt;-\n  treemapify(ind_tab, area = \"adjusted_gross_in_2023_dollar\")\n\ntreemap &lt;-\n  left_join(ind_tab, treemap |&gt; select(title, ymax:xmax))\n\nJoining with `by = join_by(title)`\n\n\n&lt;polite session&gt; https://en.wikipedia.org/wiki/List_of_Taylor_Swift_live_performances\n    User-agent: polite R package\n    robots.txt: 456 rules are defined for 33 bots\n   Crawl delay: 5 sec\n  The path is scrapable for this user-agent"
  },
  {
    "objectID": "notebooks/taylor-music.html",
    "href": "notebooks/taylor-music.html",
    "title": "",
    "section": "",
    "text": "library(dplyr)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(ggplot2)\n\ntaylor &lt;-\n  read_rds(\"data/combined_artist_data.rds\") |&gt; \n  filter(artist == \"Taylor Swift\",\n         stats.source == \"spotify\") |&gt; \n  mutate(date = as.Date(date)) |&gt; \n  pivot_longer(cols = followers_total:monthly_listeners_current)\n\ntaylor |&gt;\n  group_by(name) |&gt;\n  dplyr::summarize(spotify_data = list(value),\n                   .groups = \"drop\") |&gt;\n  gt() |&gt;\n  gt_plt_sparkline(spotify_data)\n\ntaylor |&gt;\n  ggplot(aes(x = date, y = value, group = name)) + geom_line() +\n  facet_grid(~ name)"
  },
  {
    "objectID": "notebooks/most-streamed-artists.html",
    "href": "notebooks/most-streamed-artists.html",
    "title": "",
    "section": "",
    "text": "# To clean data\nlibrary(tidyverse)\nlibrary(janitor)\n\n# To scrape data\nlibrary(rvest)\nlibrary(httr)\nlibrary(polite)\n\n\nstreams_url &lt;-\n  \"https://en.wikipedia.org/wiki/List_of_most-streamed_artists_on_Spotify\"\n\nstreams_url_bow &lt;- polite::bow(streams_url)\n\nind_html &lt;-\n1  polite::scrape(streams_url_bow) |&gt;\n2  rvest::html_nodes(\"table.wikitable\") |&gt;\n  rvest::html_table(fill = TRUE)\n\n\n1\n\nScrape the webpage\n\n2\n\nPull out anything that is a wikitable\n\n\n\n\n\ntop_listeners_tab &lt;- \n  ind_html[[4]] |&gt; \n  clean_names()\n\nmost_followed_tab &lt;- \n  ind_html[[5]] |&gt; \n  clean_names()\n\nspotify_data &lt;-\n  left_join(top_listeners_tab, most_followed_tab, join_by(artist == artist_68)) |&gt; \n  rename(monthly_listeners_millions_rank = rank.x,\n         followers_millions_rank = rank.y)"
  },
  {
    "objectID": "notebooks/swift-v-others-sankey-bump.html",
    "href": "notebooks/swift-v-others-sankey-bump.html",
    "title": "Taylor Swift vs Other Tours",
    "section": "",
    "text": "# data loading and manipulation\nlibrary(tidyverse)\n\n# data visualization  \nlibrary(ggplot2)\nlibrary(scales)\nlibrary(glue)\nlibrary(ggsankey) # get at https://github.com/davidsjoberg/ggsankey\nlibrary(ggtext)\nlibrary(colorspace)\nlibrary(ggh4x)\nlibrary(showtext)\n\nfont_add_google(\"Abril Fatface\", \"abril-fatface\")\nfont_add_google(\"Lato\", \"lato\")\n\nshowtext::showtext_auto()\n\nBorrowing heavily from Georgios Karamanis’ #TidyTuesday post, where he shared an alluvial bump chart made with {ggsankey} with data from UNHCR, the UN Refugee Agency The heaviest lift came from {ggsankey}, the R Package for making beautiful sankey, alluvial and sankey bump plots in ggplot2\nFirst, we’re going to load our data, collected manually from Pollstar reporting over the last 20 years. Artist names need to be cleaned up, and we need to structure our dataset for the Sankey Bump plot.\n\nrank_concert_tours &lt;- read_csv(here::here(\"data\", \"rank_concert_tours.csv\")) |&gt; \n  mutate(\n    artist = case_when(\n      artist == \"Tim McGraw/Faith Hill\"  ~ \"Tim Mcgraw et. al.\",\n      artist == \"Tim McGraw / Faith Hill\"  ~ \"Tim Mcgraw et. al.\",     \n      artist == \"Kenny Chesney & Tim Mcgraw\"  ~ \"Tim Mcgraw et. al.\",     \n      artist == \"Michael Jackson The Immortal World Tour By Cirque Du Soleil\"  ~ \"Michael Jackson\",\n      artist == \"Bruce Springsteen & The E Street Band\"  ~ \"Bruce Springsteen & the E Street Band\",\n      artist == \"Jay-Z / Beyoncé\"   ~ \"Beyoncé & Jay Z\",\n      artist == \"Beyoncé and Jay Z\" ~ \"Beyoncé & Jay Z\",\n      artist == \"Billy Joel/Elton John\"  ~ \"Billy Joel & Elton John\"  ,\n      artist == \"“Summer Sanitarium Tour”/Metallica\"  ~ \"Metallica\",\n      artist == \"'N Sync\"  ~ \"Nsync\",\n      .default = artist\n    )\n  )\n\nfor (YEAR in unique(rank_concert_tours$year)){\n  # print(as.character(YEAR))\n  \n  year_tbl &lt;- rank_concert_tours |&gt; \n    filter(year == YEAR)\n  \n  add_tbl &lt;- tibble(\n    year = YEAR,\n    artist = (rank_concert_tours$artist |&gt; unique())[!(rank_concert_tours$artist |&gt; unique() %in% year_tbl$artist)],\n    gross = 1\n  )\n  add_tbl$rank &lt;- 11:(nrow(add_tbl)+10)\n  \n  year_tbl &lt;- year_tbl |&gt; \n    bind_rows(\n      add_tbl\n    )\n  \n  rank_concert_tours &lt;- year_tbl |&gt; \n    bind_rows(\n      rank_concert_tours |&gt; \n        filter(year != YEAR)\n    )\n  \n}\n\nrank_concert_tours &lt;- tibble(rank_concert_tours) |&gt; \n  arrange(year, rank)\n\nNow, let’s use ggplot, ggsankey to build this plot.\n\n# set text and position of major artist and tour annotation. \nannot &lt;- tribble(\n  ~artist, ~x, ~y, ~total, ~note,\n  \"Taylor Swift\",2019, 2800, 2200000000,\"Projected\",\n  \"U2\", 2014, 2100, 316000000,\"in 2017\",\n  \"The Rolling Stones\",2003.5, 1400,1216000000,\"between 2013-2023\",\n  \"Bruce Springsteen & the E Street Band\",2011,1700,268300000,\"in 2016\",\n  \"Ed Sheeran\",2017,2400,768200000,\"between 2017-2019\"\n) |&gt; rowwise() |&gt; \n  mutate(\n    label = glue(\"**{artist}**&lt;br&gt;{scales::dollar(total)} {note}\")\n  )\n\nf1 &lt;- \"Lato\"\nf2 &lt;- \"Abril Fatface\"\n\nrank_concert_tours |&gt; \n  ggplot( ) +\n  # create Sankey bump plot\n  geom_sankey_bump(\n    aes(\n      x = year, \n      node = artist, \n      fill = ifelse(artist %in% annot$artist, artist, NA),\n      value = gross,\n      color = after_scale(colorspace::lighten(fill, 0.4))\n    ), \n    linewidth = 0.3, \n    type = \"alluvial\", \n    space = 0, \n    alpha = 0.9\n  ) +\n  # Labels for top artists\n  ggtext::geom_richtext(\n    data = annot, \n    aes(\n      x = x, \n      y = y, \n      label = label, \n      color = artist,\n    ), \n    size = 5,\n    vjust = 0, \n    family = f1, \n    fill = NA, \n    label.color = NA) + \n  # More labels\n  annotate(\"text\", x = 2023.2, y = 1000, label = \"Mid-Year\\nTotal\\nfor Other\\nArtists↓\", family = f1, hjust = 0, vjust = 1, color = \"grey30\") +\n  # Title and subtitle\n  annotate(\"text\", x = 2000, y = 3600, label = \"How does Taylor Swift's Eras Tour Compare to Others?\", size = 8, family = f2, fontface = \"bold\", hjust = 0, color = \"#181716\") +\n  annotate(\"text\", x = 2000, y = 3450, label = str_wrap(\"This plot shows rankings and revenue from each year's top ten international music tours between 2000 and 2023.\\nOther top tours & artists are highlighted. \", 60), \n           size = 5.5, family = f1, hjust = 0, vjust = 1, color = \"#393433\",\n           lineheight = .9) +\n  \n  # Scales, coord, theme\n  scale_x_continuous(\n    limits = c(2000,2024),\n    breaks = seq(2002, 2022, 2),\n    minor_breaks = NULL, \n    guide = \"axis_minor\") +\n  scale_y_continuous(\n    labels = unit_format(\n      prefix = \"$\",\n      unit = \"Billion\", \n      scale = 1e-3),\n    limits = c(0,3700),\n    minor_breaks = NULL\n  ) +\n  scale_fill_manual(values = c(\"#0041CC\", \"#e17d17\", \"#CE1126\", \"#A713CC\",\"#38C754\"), na.value = \"grey80\") +\n  scale_color_manual(values = c(\"#0041CC\", \"#e17d17\", \"#CE1126\", \"#A713CC\",\"#38C754\"), na.value = \"grey80\") +\n  scale_size_continuous(range = c(4, 6)) +\n  coord_cartesian(clip = \"off\", expand = FALSE) +\n  labs(\n    caption = \"Source: Pollstar\"\n  ) +\n  theme_minimal(\n    base_family = f1\n  ) +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"#FFFFFE\", color = NA),\n    axis.title = element_blank(),\n    axis.text = element_text(size = 12, margin = margin(5, 0, 0, 0), family = f1, color = \"#393433\"),\n    # axis.ticks.x = element_line(color = \"grey70\"),\n    # ggh4x.axis.ticks.length.minor = rel(1),\n    plot.margin = margin(20, 75, 30, 35),\n    plot.caption = element_text(margin = margin(10, 500, 0, 0))\n  )"
  },
  {
    "objectID": "r.html",
    "href": "r.html",
    "title": "Taylor Swift’s Tour in the Pantheon of Music",
    "section": "",
    "text": "[to be added]",
    "crumbs": [
      "Walk through the code",
      "🔵 See the code in R"
    ]
  },
  {
    "objectID": "py.html",
    "href": "py.html",
    "title": "Taylor Swift’s Tour in the Pantheon of Music",
    "section": "",
    "text": "[to be added]",
    "crumbs": [
      "Walk through the code",
      "🐍 See the code in Python"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Taylor Swift’s Tour in the Pantheon of Music",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula. Aliquam sit amet ipsum ut nisl gravida molestie. Morbi orci tortor, dapibus a dictum vitae, congue sit amet lorem. Praesent purus risus, auctor ac neque sed, interdum feugiat erat. Fusce gravida pellentesque lacus, eget sodales elit sodales vitae. Nunc porttitor pulvinar bibendum.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula. Aliquam sit amet ipsum ut nisl gravida molestie. Morbi orci tortor, dapibus a dictum vitae, congue sit amet lorem. Praesent purus risus, auctor ac neque sed, interdum feugiat erat. Fusce gravida pellentesque lacus, eget sodales elit sodales vitae. Nunc porttitor pulvinar bibendum.\nNumber of shows\n146\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula.\nNumber of cities\n10,512,000\n\nbased on 72k average attendance per show\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula.\nEstimated total attendance\n10,512,000\n\nbased on 72k average attendance per show\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Taylor Swift’s Tour in the Pantheon of Music",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eget sem in leo pharetra rhoncus in a felis. Etiam ligula elit, euismod in gravida in, fermentum sed ligula. Aliquam sit amet ipsum ut nisl gravida molestie. Morbi orci tortor, dapibus a dictum vitae, congue sit amet lorem. Praesent purus risus, auctor ac neque sed, interdum feugiat erat. Fusce gravida pellentesque lacus, eget sodales elit sodales vitae. Nunc porttitor pulvinar bibendum."
  },
  {
    "objectID": "index.html#the-eras-tour",
    "href": "index.html#the-eras-tour",
    "title": "Taylor Swift’s Tour in the Pantheon of Music",
    "section": "The Eras Tour",
    "text": "The Eras Tour"
  },
  {
    "objectID": "index.html#openers",
    "href": "index.html#openers",
    "title": "Taylor Swift’s Tour in the Pantheon of Music",
    "section": "Openers",
    "text": "Openers\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "notebooks/taylor-vs-countries-gdp.html",
    "href": "notebooks/taylor-vs-countries-gdp.html",
    "title": "",
    "section": "",
    "text": "# To clean data\nlibrary(tidyverse)\nlibrary(janitor)\n\n# To scrape data\nlibrary(rvest)\nlibrary(httr)\nlibrary(polite)\n\n# To visualize data\nlibrary(ggplot2)\nlibrary(showtext)\nlibrary(cowplot)\n\nfont_add_google(\"Abril Fatface\", \"abril-fatface\")\nfont_add_google(\"Lato\", \"lato\")\n\nshowtext::showtext_auto()\n\n\nlibrary(rnaturalearth)\n\nfiji &lt;- \n  ne_countries(scale = 10, returnclass = \"sf\", country = \"Fiji\") \n\np_Fiji &lt;-\n  ggplot(fiji) +\n  geom_sf(fill = \"#823549\",\n          color = \"black\") +\n  coord_sf(\n    crs = 3460, # https://epsg.io/3460\n    ) +\n  theme_void() +\n  labs(title = ind_tab |&gt; filter(country_territory == \"Fiji\") |&gt; pull(country_territory),\n       subtitle = scales::dollar(ind_tab |&gt; filter(country_territory == \"Fiji\") |&gt; pull(world_bank_14), scale=1e6)) +\n    theme(\n      plot.subtitle = element_text(size = 12,\n                                   family = \"lato\"),\n      title = element_text(size = 16,\n                           family = \"abril-fatface\")\n    )\n\ncountries &lt;- c(\"Kosovo\", \"Somalia\", \"Togo\", \"Bermuda\", \"Montenegro\", \"Barbados\", \"Eswatini\")\n\ncolors &lt;- c(\"#b9d2b5\", \"#f4cb8d\", \"#d1b2d2\", \"#b5e9f6\", \"#F9B2D0\", \"#CFCAC6\", \"#C8AE95\")\n  \ncountry_plots &lt;- function(country, fill){\n  country_data &lt;-\n    ne_countries(scale = 10, returnclass = \"sf\", country = country)\n\n  p &lt;- ggplot(country_data) +\n    geom_sf(fill = fill,\n            color = \"black\") +\n    coord_sf() +\n    theme_void() +\n    labs(\n      title = ind_tab |&gt; filter(country_territory == country) |&gt; pull(country_territory),\n      subtitle = scales::dollar(\n        ind_tab |&gt; filter(country_territory == country) |&gt; pull(world_bank_14),\n        scale = 1e6\n      )\n    ) +\n    theme(\n      plot.subtitle = element_text(size = 12,\n                                   family = \"lato\"),\n      title = element_text(size = 16,\n                           family = \"abril-fatface\")\n    )\n  \nplot_name &lt;- paste(\"p_\", country, sep = \"\")\n  assign(plot_name, p, envir = .GlobalEnv)\n\n}\n\npurrr::map2(.f = country_plots, .x = countries, .y = colors)\n\np_blank &lt;-\n  ggplot() +\n  labs(title = \"Taylor Swift\",\n       subtitle = \"$6,300,000,000\") +\n  theme_void() +\n  theme(\n    plot.subtitle = element_text(size = 12,\n                                 family = \"lato\",\n                                 hjust = 0.5),\n    plot.title = element_text(hjust = 0.5),\n    title = element_text(size = 16,\n                         family = \"abril-fatface\",\n                         hjust = 0.5))\n\n\ngdp_plot &lt;-\n  plot_grid(p_Kosovo, p_Somalia, p_Togo, p_Bermuda, p_blank, p_Montenegro, p_Barbados, p_Fiji, p_Eswatini, align = \"h\" ) + \n  draw_image(\n    here::here(\"notebooks\", \"t_swift.jpg\"),\n    x = 0.42,\n    y = 0.36,\n    width = 0.2,\n    height = 0.2\n  )\n\nsave(gdp_plot, file = here::here(\"images\", \"gdp_plot.rdata\"))\n\n\nurl &lt;-\n  \"https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)\"\n\nurl_bow &lt;- polite::bow(url)\nurl_bow\n\nind_html &lt;-\n  polite::scrape(url_bow) |&gt;\n  rvest::html_nodes(\"table.wikitable\") |&gt;\n  rvest::html_table(fill = TRUE) \n\nind_tab &lt;- \n  ind_html[[1]] |&gt; \n  janitor::clean_names() |&gt; \n  slice(-1) |&gt; \n  dplyr::mutate(across(\n    c(imf_1_13,\n      world_bank_14,\n      united_nations_15),\n    ~ as.numeric(str_replace_all(.x, \"[$,]\", \"\"))\n  )) |&gt; \n  filter(world_bank_14 &lt; 10000 & world_bank_14 &gt; 4900) |&gt; \n  arrange(desc(world_bank_14))\nurl &lt;-\n  \"https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)\"\n\nurl_bow &lt;- polite::bow(url)\nurl_bow\n\nind_html &lt;-\n  polite::scrape(url_bow) |&gt;\n  rvest::html_nodes(\"table.wikitable\") |&gt;\n  rvest::html_table(fill = TRUE) \n\nind_tab &lt;- \n  ind_html[[1]] |&gt; \n  janitor::clean_names() |&gt; \n  slice(-1) |&gt; \n  dplyr::mutate(across(\n    c(imf_1_13,\n      world_bank_14,\n      united_nations_15),\n    ~ as.numeric(str_replace_all(.x, \"[$,]\", \"\"))\n  )) |&gt; \n  filter(world_bank_14 &lt; 10000 & world_bank_14 &gt; 4000) |&gt; \n  arrange(desc(world_bank_14))\n\ncountries &lt;- unique(ind_tab$country_territory)"
  },
  {
    "objectID": "notebooks/eras-tour-dates-and-venues.html",
    "href": "notebooks/eras-tour-dates-and-venues.html",
    "title": "",
    "section": "",
    "text": "See R code\n\n\n\n\n\n\n\nThe Eras Tour Dates and Venues\n\n\n\n\n# To clean data\nlibrary(tidyverse)\nlibrary(janitor)\n\n# To scrape data\nlibrary(rvest)\nlibrary(httr)\nlibrary(polite)\n\n# To geocode data\nlibrary(tidygeocoder)\n\n# To visualize data\nlibrary(leaflet)\n\n\nurl_map &lt;-\n  \"https://www.sportskeeda.com/pop-culture/taylor-swift-2023-the-eras-tour-ticket-cities-and-dates\"\n\nurl_map_bow &lt;- polite::bow(url_map)\nurl_map_bow\n\n&lt;polite session&gt; https://www.sportskeeda.com/pop-culture/taylor-swift-2023-the-eras-tour-ticket-cities-and-dates\n    User-agent: polite R package\n    robots.txt: 41 rules are defined for 4 bots\n   Crawl delay: 5 sec\n  The path is scrapable for this user-agent\n\n\n\nmap_html &lt;-\n  polite::scrape(url_map_bow) |&gt;  # scrape web page\n  rvest::html_nodes(\"tbody\") |&gt; # pull out specific table\n  rvest::html_table(fill = TRUE) |&gt;\n  bind_rows() |&gt;\n  row_to_names(row_number = 1) |&gt;\n  clean_names()\n\n\nmap_html_geocode &lt;-\n  map_html |&gt;\n  geocode(venue,\n          method = \"osm\",\n          lat = latitude ,\n          long = longitude)\n\nmap_html_geo &lt;-\n  map_html_geocode |&gt;\n  mutate(\n    latitude = case_when(\n      venue == \"Empower Field at Mile Hi\" ~ 39.74359,\n      venue == \"Johan Cruyff Arena\" ~ 52.3143,\n      .default = latitude\n    ),\n    longitude = case_when(\n      venue == \"Empower Field at Mile Hi\" ~ -105.01968,\n      venue == \"Johan Cruyff Arena\" ~ 4.94187,\n      .default = longitude\n    )\n  ) |&gt;\n  mutate(number_shows = n(),\n         .by = c(venue, city)) |&gt;\n  mutate(occurred = case_when(lubridate::mdy(paste0(date, year)) &lt; today() ~ \"Occurred\",\n                              .default = \"Not Occurred\"))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `occurred = case_when(...)`.\nCaused by warning:\n!  24 failed to parse.\n\n\n\npal &lt;- colorFactor(\n  palette = c(\"#823549\", \"#1D1F38\"),\n  domain = map_html_geo$occurred\n)\n\nleaflet(options = leafletOptions(minZoom = 10, maxZoom = 10)) |&gt;\n  addProviderTiles(\"Esri.WorldGrayCanvas\",\n                   options = (noWrap = TRUE)) |&gt;\n  setMaxBounds(\n    lng1 = 180,\n    lat1 = 90,\n    lng2 = -180,\n    lat2 = -90\n  ) |&gt; \n  addCircleMarkers(\n    data = map_html_geo,\n    color = ~pal(occurred),\n    label = paste(\n      \"Venue: \",\n      map_html_geo$venue,\n      \"&lt;br&gt;\",\n      \"City: \",\n      map_html_geo$city,\n      \"&lt;br&gt;\",\n      \"Number of Shows: \",\n      map_html_geo$number_shows\n    ) |&gt;\n      lapply(htmltools::HTML)\n  ) |&gt; \n  addLegend(\"bottomright\", pal = pal, values = map_html_geo$occurred,\n    title = \"Event Status\",\n    opacity = 1\n  )"
  },
  {
    "objectID": "notebooks/opener-data.html",
    "href": "notebooks/opener-data.html",
    "title": "",
    "section": "",
    "text": "Attaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "notebooks/annual-highest-grossing-tours-r.html",
    "href": "notebooks/annual-highest-grossing-tours-r.html",
    "title": "",
    "section": "",
    "text": "See R code\n\n\n\n\n\n\n\nTip\n\n\n\n\nannual_hi_gross_tours &lt;-\n  ind_html[[9]] |&gt;\n  clean_names()\n\n\nannual_hi_gross_tours_clean &lt;-\n  annual_hi_gross_tours |&gt;\n  dplyr::mutate(across(\n    c(adjusted_gross_in_2022_dollar,\n      actual_gross),\n    ~ as.numeric(str_replace_all(.x, \"[$,]\", \"\"))\n  ),\n  year = lubridate::ymd(year, truncated = 2L),\n  decade = as.factor(floor_date(year, years(10)))) |&gt; \n  add_row(artist = \"Taylor Swift\",\n          tour_title = \"The Eras Tour (Expected)\",\n          year = lubridate::date(\"2023-01-01\"),\n          shows = 146,\n          adjusted_gross_in_2022_dollar = 1400000000,\n          decade = \"2020-01-01\",\n          .before = 1)\n\n\nannual_hi_gross_tours_clean |&gt;\n  ggplot(aes(\n    x = year,\n    y = adjusted_gross_in_2022_dollar,\n    fill = decade\n  )) +\n  geom_bar(stat = \"identity\") +\n  geom_smooth(aes(group = decade)) +\n  scale_size(range = c(0, 4)) +\n  theme_minimal() +\n  theme(\n    text = element_text(size = 9,\n                        family = \"lato\"),\n    title = element_text(size = 16,\n                         family = \"abril-fatface\"),\n    panel.background = element_blank(),\n    axis.ticks.x = element_blank(),\n    axis.text.x = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank()) +\n  geom_text(aes(label = tour_title),\n            family = \"lato\",\n            vjust = -2.5,\n            angle = 45,\n            size = 2) +\n  labs(title = \"Annual highest-grossing tours\")\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: span too small.  fewer data values than degrees of freedom.\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: at 6205.3\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: radius 13.359\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: all data on boundary of neighborhood. make span bigger\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: pseudoinverse used at 6205.3\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: neighborhood radius 3.655\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: reciprocal condition number 1\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: at 6943.7\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: radius 13.359\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: all data on boundary of neighborhood. make span bigger\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: There are other near singularities as well. 13.359\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: zero-width neighborhood. make span bigger\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: zero-width neighborhood. make span bigger\n\n\nWarning: Computation failed in `stat_smooth()`\nCaused by error in `predLoess()`:\n! NA/NaN/Inf in foreign function call (arg 5)\n\n\n\nannual_hi_gross_tours_clean |&gt;\n  ggplot(aes(\n    x = shows,\n    y = adjusted_gross_in_2022_dollar,\n    fill = decade\n  )) +\n  geom_point(alpha = 0.5,\n             shape = 21,\n             color = \"black\") +\n  scale_size(range = c(0, 4)) +\n  scale_fill_viridis(discrete = TRUE,\n                     guide = FALSE,\n                     option = \"A\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    text = element_text(size = 9,\n                        family = \"lato\"),\n    title = element_text(size = 16,\n                         family = \"abril-fatface\"),\n    panel.background = element_blank(),\n    axis.ticks.x = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank()\n  ) +\n  labs(title = \"Number of shows vs. income\")"
  },
  {
    "objectID": "notebooks/get-songstats-data.html",
    "href": "notebooks/get-songstats-data.html",
    "title": "",
    "section": "",
    "text": "See R code\n\n\n\n\n\n\n\nTip\n\n\n\n\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(readr)\nlibrary(glue)\n\nget_artist_data &lt;- function(artist_name, songstats_artist_id) {\n  url &lt;-\n    \"https://api.songstats.com/enterprise/v1/artists/historic_stats\"\n  \n  queryString &lt;- list(\n    source = \"all\",\n    songstats_artist_id = songstats_artist_id,\n    start_date = \"2020-01-01\"\n  )\n  \n  response &lt;- httr::VERB(\n    \"GET\",\n    url,\n    query = queryString,\n    add_headers(\n      \"Accept-Encoding\" = \"\",\n      \"apikey\" = Sys.getenv(\"SONGSTATS_TOKEN\")\n    ),\n    content_type(\"application/octet-stream\"),\n    accept(\"application/json\")\n  )\n  \n  artist_data &lt;- httr::content(response, \"text\")\n  \n  artist_tibble &lt;- artist_data |&gt;\n    jsonlite::fromJSON() |&gt;\n    purrr::map_if(is.data.frame, list) |&gt;\n    as.data.frame() |&gt;\n    tidyr::unnest_wider(stats.data) |&gt;\n    tidyr::unnest(history) |&gt;\n    dplyr::mutate(\n      time_frame = dplyr::case_when(date &lt; \"2022-11-01\" ~ \"before announcement\",\n                                    .default = \"after announcement\"),\n      artist = artist_name\n    )\n  \n  file_name &lt;- glue::glue(\"{artist_name}_tibble.Rds\")\n  readr::write_rds(artist_tibble, \"data/file_name\")\n  \n  return(artist_tibble)\n}\n\n# Create a list of artists and their IDs\nartists &lt;- list(\n  c(\"Paramore\", \"p5xm8h7b\"),\n  c(\"Beabadoobee\", \"n3k29evr\"),\n  c(\"Phoebe Bridgers\", \"9yhbd1el\"),\n  c(\"Girl In Red\", \"p71m4gr8\"),\n  c(\"MUNA\", \"fyxmowt5\"),\n  c(\"HAIM\", \"apuz50ix\"),\n  c(\"GAYLE\", \"q16uf7gk\"),\n  c(\"OWENN\", \"cztp0nug\"),\n  c(\"Gracie Abrams\", \"so4cd0bt\"),\n  c(\"Taylor Swift\", \"i5muw4xf\")\n)\n\nartist_data_list &lt;-\n  map(artists, ~ get_artist_data(.x[1], .x[2]))\n\ncombined_artist_data &lt;-\n  bind_rows(artist_data_list)\n\nwrite_rds(combined_artist_data, \"data/combined_artist_data.rds\")"
  },
  {
    "objectID": "notebooks/highest-gross-tours-decade-r.html",
    "href": "notebooks/highest-gross-tours-decade-r.html",
    "title": "",
    "section": "",
    "text": "See R code\n\n\n\n\n\n\n\nTip\n\n\n\n\ncombine_data &lt;- function(ind_html_list) {\n  # Initialize an empty tibble\n  combined_data &lt;- tibble()\n  \n  # Loop through the ind_html_list and append each element to the combined_data\n  for (i in 4:8) {\n    extracted_data &lt;- ind_html_list[[i]] |&gt; clean_names()\n    combined_data &lt;- bind_rows(combined_data, extracted_data)\n  }\n  \n  return(combined_data)\n}\n\nannual_hi_gross_tours &lt;- combine_data(ind_html)\n\n\ntours_by_decade &lt;-\n  annual_hi_gross_tours |&gt;\n  dplyr::mutate(across(\n    c(adjusted_gross_in_2022_dollar,\n      averagegross,\n      actual_gross),\n    ~ as.numeric(str_replace_all(.x, \"[$,]\", \"\"))\n  )) |&gt;\n     add_row(artist = \"Taylor Swift\",\n          tour_title = \"The Eras Tour (Expected)\",\n          year_s = \"2023-2024\",\n          shows = 146,\n          adjusted_gross_in_2022_dollar = 1400000000) |&gt; \n  mutate(\n    start_year = str_sub(year_s, start = 1, end = 4),\n    year = lubridate::ymd(start_year, truncated = 2L)) |&gt; \n  mutate(decade = as.factor(floor_date(year, years(10))))\n\n\ng1 &lt;- subset(tours_by_decade, tour_title == \"The Eras Tour (Expected)\")\n\ntours_by_decade |&gt;\n  ggplot(aes(\n    x = year,\n    y = adjusted_gross_in_2022_dollar,\n    size =  shows,\n    fill = decade\n  )) +\n  geom_point(alpha = 0.5,\n             shape = 21,\n             color = \"black\") +\n  scale_size(range = c(.1, 8)) +\n  scale_fill_viridis(discrete = TRUE,\n                     guide = FALSE,\n                     option = \"G\") +\n  theme_minimal() +\n  geom_point(data = g1, colour = \"#122B2B\") +\n  geom_text(\n    data = g1,\n    label = \"Taylor Swift\",\n    vjust = 2.4,\n    size = 3\n  ) +\n  theme(legend.position = \"none\") +\n  labs(title = \"Highest-grossing tours by decade\") +\n  scale_x_date(limits = c(ymd(\"1980-01-01\"), ymd(\"2028-01-01\")))\n\n\n\n\n\ntours_by_decade |&gt; \n  ggplot(aes(x = shows, y = adjusted_gross_in_2022_dollar)) +\n  geom_point()\n\n\n\n\n\ntours_by_decade |&gt; \n  ggplot(aes(x = shows, y = adjusted_gross_in_2022_dollar)) +\n  geom_point()"
  },
  {
    "objectID": "notebooks/highest-grossing-tours-r.html",
    "href": "notebooks/highest-grossing-tours-r.html",
    "title": "",
    "section": "",
    "text": "See R code\n\n\n\n\n\n\n\nHighest-grossing tours of all time visualization\n\n\n\nLet’s get started by loading the necessary R packages to clean, scrape, and visualize the data. These packages are the building blocks of our data scraping journey.\n\n# To clean data\nlibrary(tidyverse)\nlibrary(janitor)\n\n# To scrape data\nlibrary(rvest)\nlibrary(httr)\nlibrary(polite)\n\n# To visualize data\nlibrary(ggplot2)\nlibrary(showtext)\nlibrary(viridis)\n\nfont_add_google(\"Playfair Display\", \"playfair-display\")\nfont_add_google(\"Lato\", \"lato\")\n\nshowtext::showtext_auto()\n\nNow that we have the necessary libraries loaded, it’s time to politely scrape data from Wikipedia and bring it into R. We’ll start by specifying the URL of the Wikipedia page we want to extract data from:\n\nurl &lt;-\n  \"https://en.wikipedia.org/wiki/List_of_highest-grossing_concert_tours\"\n\nNext, we’ll use the polite package to create a ‘bag of words’ (bow) representation of the URL. This step helps us make a polite request to the web server for the page’s content:\n\nurl_bow &lt;- polite::bow(url)\nurl_bow\n\n&lt;polite session&gt; https://en.wikipedia.org/wiki/List_of_highest-grossing_concert_tours\n    User-agent: polite R package\n    robots.txt: 456 rules are defined for 33 bots\n   Crawl delay: 5 sec\n  The path is scrapable for this user-agent\n\n\nOnce we have our ‘bow,’ we can use it to scrape the web page. We’ll specifically target the tables with the class ‘wikitable’ on the page:\n\nind_html &lt;-\n  polite::scrape(url_bow) |&gt;  # scrape web page\n  rvest::html_nodes(\"table.wikitable\") |&gt; # pull out specific table\n  rvest::html_table(fill = TRUE) \n\nFinally, we’ll clean up the extracted table (the second table on the page, Top 20 highest-grossing tours of all time) by storing it in the ind_tab variable and ensuring that column names are in a consistent format:\n\nind_tab &lt;- \n  ind_html[[2]] |&gt; \n  clean_names()\n\nThis code segment efficiently fetches and prepares the data we need from the Wikipedia page. Our next step is to clean it for analysis. In this code snippet, we’ll perform some essential data cleaning tasks to make our dataset ready for exploration: transforming the Adjusted Gross in 2022 Dollars, Actual Gross, and Average Gross columns into numeric variables.\n\nind_tab_clean &lt;-\n  ind_tab |&gt;\n  dplyr::mutate(across(\n    c(adjusted_gross_in_2022_dollars,\n      actual_gross,\n      averagegross),\n    ~ as.numeric(str_replace_all(.x, \"[$,]\", \"\"))\n  ))\n\nWe want to add Taylor’s data:\n\nind_tab_tay &lt;-\n  ind_tab_clean |&gt; \n  add_row(artist = \"Taylor Swift\",\n          tour_title = \"The Eras Tour (Expected)\",\n          year_s = \"2023-2024\",\n          shows = 146,\n          adjusted_gross_in_2022_dollars = 1400000000,\n          .before = 1)\n\nNow that our data is clean and ready, let’s visualize the highest-grossing concert tours of all time (as of 2023) using a bar chart. We’ll use the ggplot2 package.\n\nind_tab_tay |&gt;\n  slice(1:10) |&gt; \n  mutate(color = case_when(artist == \"Taylor Swift\" ~ \"#D3ABD0\",\n                           .default = \"#903345\")) |&gt;\n  ggplot(aes(\n    x = forcats::fct_reorder(tour_title,\n                             adjusted_gross_in_2022_dollars),\n    y = adjusted_gross_in_2022_dollars\n  )) +\n  geom_col(aes(fill = color),\n           color = \"black\",\n           width = .9) +\n  scale_fill_identity() +\n  labs(title = \"Highest-grossing tours of all time\",\n       subtitle = \"(as of 2023)\") +\n  theme(\n    text = element_text(size = 9,\n                        family = \"lato\"),\n    title = element_text(\n      size = 16,\n      family = \"playfair-display\"\n    ),\n    subtitle = element_text(size = 12,\n                            family = \"lato\")\n  ) +\n  geom_text(\n    aes(y = 12000000, label = tour_title),\n    family = \"lato\",\n    hjust = 0,\n    vjust = 0.5,\n    size = 3,\n    color = \"white\",\n    fontface = \"bold\"\n  ) +\n  geom_text(\n    aes(\n      y = 12000000,\n      label = ifelse(artist == \"Taylor Swift\", tour_title, \"\")\n    ),\n    family = \"lato\",\n    hjust = 0,\n    vjust = 0.5,\n    size = 3,\n    color = \"black\",\n    fontface = \"bold\"\n  ) +\n  geom_text(\n    aes(\n      label = scales::dollar(\n        adjusted_gross_in_2022_dollars,\n        accuracy = 1,\n        scale = 1e-6,\n        suffix = \"M\"\n      )\n    ),\n    family = \"lato\",\n    hjust = -0.1,\n    vjust = 0.5,\n    size = 3\n  ) +\n  coord_flip() +\n  scale_y_continuous(limits = c(0, 1500000000)) +\n  theme_void()"
  }
]