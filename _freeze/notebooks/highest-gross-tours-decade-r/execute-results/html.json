{
  "hash": "611565e0e4e66a4f7c5ffb09088171c7",
  "result": {
    "markdown": "---\nexecute:\n  eval: false\n---\n\n<details><summary>See R code</summary>\n\n::: {.callout-tip}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombine_data <- function(ind_html_list) {\n  # Initialize an empty tibble\n  combined_data <- tibble()\n  \n  # Loop through the ind_html_list and append each element to the combined_data\n  for (i in 4:8) {\n    extracted_data <- ind_html_list[[i]] |> clean_names()\n    combined_data <- bind_rows(combined_data, extracted_data)\n  }\n  \n  return(combined_data)\n}\n\nannual_hi_gross_tours <- combine_data(ind_html)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntours_by_decade <-\n  annual_hi_gross_tours |>\n  dplyr::mutate(across(\n    c(adjusted_gross_in_2022_dollar,\n      averagegross,\n      actual_gross),\n    ~ as.numeric(str_replace_all(.x, \"[$,]\", \"\"))\n  )) |>\n  mutate(\n    start_year = str_sub(year_s, start = 1, end = 4),\n    year = lubridate::ymd(start_year, truncated = 2L)\n  ) |>\n  mutate(\n    decade = paste0(str_sub(\n      as.factor(floor_date(year, years(10))), start = 1, end = 4\n    ), \"s\"),\n    `Adjusted Gross` = -adjusted_gross_in_2022_dollar,\n    `Average Gross` = averagegross) |>\n  pivot_longer(cols = c(`Adjusted Gross`, `Average Gross`)) |>\n  mutate(title = case_when(str_detect(tour_title, artist) ~ tour_title,\n                           .default = paste0(artist, \" \", tour_title)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tours_by_decade) +\n  geom_col(aes(value, \n               fct_reorder(tour_title, year, .desc = TRUE), \n               fill = decade)) +\n  geom_text(data = tours_by_decade |> filter(name == \"Average Gross\"),\n            aes(x = 0, tour_title, label = title),\n            hjust = 0.5,\n            nudge_x = -5000000,\n            family = \"lato\",\n            size = 3.5) +\n  facet_grid2(rows = vars(decade),\n              cols = vars(toupper(name)),\n              scales = \"free\",\n              space = \"free_y\",\n              strip = strip_split(\n                c(\"top\", \"top\"),\n                text_x = elem_list_text(color = c(\"#903345\", \"grey60\")),\n                by_layer_x = TRUE)) +\n  scale_x_facet(PANEL == 1, limits = c(-900000000, 0), labels = abs) +\n  scale_x_facet(PANEL == 2, limits = c(0, 14000000)) +\n  labs(title = \"Top 10 highest-grossing tours by decade\",\n       caption = \"Source: Wikipedia · † Indicates the tour ongoing · Graphic: Inspired by Georgios Karamanis\") +\n  theme_minimal() +\n  coord_cartesian(clip = \"off\") +\n  theme(\n    panel.spacing.x=unit(4, \"lines\"),\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"white\", color = NA),\n    axis.text.y = element_blank(),\n    axis.title = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    strip.text = element_text(size = 12, face = \"bold\"),\n    plot.title = element_text(face = \"bold\",\n                              size = 20,\n                              family = \"abril-fatface\"),\n    text = element_text(size = 9,\n                            family = \"lato\")\n  ) +\n  scale_fill_manual(values = c(\"1980s\" = \"#434961\", \n                               \"1990s\" = \"#421E18\", \n                               \"2000s\" = \"#EBBED3\", \n                               \"2010s\" = \"#AA9EB6\", \n                               \"2020s\" = \"#A91E47\"))\n\n# ggsave(\n#   file = \"images/highest-grossing-tour-decade.png\",\n#   width = 4,\n#   height = 8,\n#   dpi = 300\n# )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndecades <- c(\"1980s\", \"1990s\", \"2000s\", \"2010s\")\n\ndecade_plots <- function(individual_decade){\n  \n  decade_dat <- tours_by_decade |> \n    filter(decade == individual_decade)\n  \n  p <-\n    ggplot(decade_dat) +\n    geom_col(aes(value,\n                 fct_reorder(tour_title, year, .desc = TRUE),\n                 fill = decade)) +\n    geom_text(\n      data = decade_dat |> filter(name == \"Average Gross\"),\n      aes(x = 0, tour_title, label = title),\n      hjust = 0.5,\n      nudge_x = -12500000,\n      family = \"lato\",\n      size = 3.5\n    ) +\n    facet_grid2(\n      rows = vars(decade),\n      cols = vars(toupper(name)),\n      scales = \"free\",\n      space = \"free_y\",\n      strip = strip_split(\n        c(\"top\", \"top\"),\n        text_x = elem_list_text(color = c(\"#903345\", \"grey60\")),\n        by_layer_x = TRUE\n      )\n    ) +\n    scale_x_facet(PANEL == 1, limits = c(-3000000000, 0), labels = abs) +\n    scale_x_facet(PANEL == 2, limits = c(0, 14000000)) +\n    theme_minimal() +\n    coord_cartesian(clip = \"off\") +\n    theme(\n      panel.spacing.x = unit(15, \"lines\"),\n      legend.position = \"none\",\n      plot.background = element_rect(fill = \"white\", color = NA),\n      axis.text.y = element_blank(),\n      axis.title = element_blank(),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      strip.text = element_text(size = 12, face = \"bold\"),\n      plot.title = element_text(\n        face = \"bold\",\n        size = 20,\n        family = \"abril-fatface\"\n      ),\n      text = element_text(size = 9,\n                          family = \"lato\")\n    ) +\n    scale_fill_manual(\n      values = c(\n        \"1980s\" = \"#434961\",\n        \"1990s\" = \"#421E18\",\n        \"2000s\" = \"#EBBED3\",\n        \"2010s\" = \"#AA9EB6\"\n      )\n    )\n  \n  save(p,\n       file = paste0(\"images/highest-grossing-tour-\", individual_decade, \".rdata\"))\n  \n}\n\npurrr::map(.f = decade_plots, .x = decades)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://stackoverflow.com/questions/39584669/r-dotted-predicted-above-solid-bars-in-bar-graph\n\ntour_2020_data <- \n  tours_by_decade |> \n  filter(decade == \"2020s\") |>\n  mutate(group = \"b\") |> \n  add_row(adjusted_gross_in_2022_dollar = 2200000000, \n          artist = \"Taylor Swift\",\n          shows = 146,\n          start_year = \"2023\",\n          year = as.Date(\"2023-01-01\"),\n          name = \"Adjusted Gross\",\n          value = -2200000000,\n          title = \"Taylor Swift The Eras Tour †\",\n          tour_title = \"The Eras Tour †\",\n          year_s = \"2023\",\n          averagegross = 13928571,\n          decade = \"2020s\",\n          group = \"a\")\n\np_2020s <-\n  tour_2020_data |>\n  ggplot() +\n    geom_col(aes(value,\n                 fct_reorder(tour_title, year, .desc = TRUE),\n                 fill = group)) +\n    geom_text(\n      data = tour_2020_data |> filter(name == \"Average Gross\"),\n      aes(x = 0, tour_title, label = title),\n      hjust = 0.5,\n      nudge_x = -12500000,\n      family = \"lato\",\n      size = 3.5\n    ) +\n    facet_grid2(\n      rows = vars(decade),\n      cols = vars(toupper(name)),\n      scales = \"free\",\n      space = \"free_y\",\n      strip = strip_split(\n        c(\"top\", \"top\"),\n        text_x = elem_list_text(color = c(\"#903345\", \"grey60\")),\n        by_layer_x = TRUE\n      )\n    ) +\n    scale_x_facet(PANEL == 1, limits = c(-3000000000, 0), labels = abs) +\n    scale_x_facet(PANEL == 2, limits = c(0, 14000000)) +\n    theme_minimal() +\n    coord_cartesian(clip = \"off\") +\n    theme(\n      panel.spacing.x = unit(15, \"lines\"),\n      legend.position = \"none\",\n      plot.background = element_rect(fill = \"white\", color = NA),\n      axis.text.y = element_blank(),\n      axis.title = element_blank(),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      strip.text = element_text(size = 12, face = \"bold\"),\n      plot.title = element_text(\n        face = \"bold\",\n        size = 20,\n        family = \"abril-fatface\"\n      ),\n      text = element_text(size = 9,\n                          family = \"lato\")\n    ) +\n    scale_fill_manual(\n      values = c(\"#29384D\", \"#A91E47\")\n      )\n\nsave(p_2020s, file = \"images/highest-grossing-tour-2020s.rdata\")\n```\n:::\n\n\n:::\n</summary>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}