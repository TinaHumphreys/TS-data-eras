{
  "hash": "2598fa37fcacc9ab99e4f10744147b70",
  "result": {
    "engine": "knitr",
    "markdown": "---\noutput: html_document\n---\n\n\n<details><summary>See R code</summary>\n\n:::{.rcode}\n::::{.rcode-header}\nR Code: Taylor Swift Economic Impact Map\n::::\n::::{.rcode-container}\n\nTo create the Taylor Swift Economic Impact Map, we first load the packages that we will need.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To clean data\nlibrary(tidyverse)\n\n# To geocode data\nlibrary(tidygeocoder)\n\n# To make the map\nlibrary(leaflet)\nlibrary(leaflet.extras)\nlibrary(htmltools)\n```\n:::\n\n\nNow, we read a CSV file (\"taylor-economic-impact.csv\") using the `read_csv()` function from the readr package. We geocode the data using the tidygeocoder package. The package uses OpenStreetMap's geocoding service to translate location information (latitude and longitude) into geographic coordinates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimpact <-\n  read_csv(here::here(\"data\", \"taylor-economic-impact.csv\"))\n\nimpact_geo <-\n  impact |>\n  geocode(location,\n          method = \"osm\",\n          lat = latitude,\n          long = longitude)\n```\n:::\n\n\nFinally, we can use the leaflet package to create an interactive map displaying markers for various locations indicating Taylor's economic impact.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaylorIcon <-\n  makeIcon(\n    iconUrl = here::here(\"images\", \"map-taylor.png\"),\n    iconWidth = 64,\n    iconHeight = 64,\n    iconAnchorX = 22,\n    iconAnchorY = 94,\n    shadowUrl = \"http://leafletjs.com/examples/custom-icons/leaf-shadow.png\",\n    shadowWidth = 50,\n    shadowHeight = 64,\n    shadowAnchorX = 4,\n    shadowAnchorY = 62\n  )\n\nlabelText = paste0(\n  \"<b>\",\n  impact_geo$location,\n  \"</b>\",\n  \"<br/>\",\n  \"<br/>\",\n  impact_geo$news,\n  \"<br>\",\n  \"<br>\",\n  '<a href=\"',\n  impact_geo$Source,\n  '\">Source</a>'\n) |>\n  lapply(htmltools::HTML)\n\nleaflet(data = impact_geo,\n        options = leafletOptions(zoomControl = FALSE,\n                                 scrollWheelZoom = FALSE)) |>\n  setView(lng, lat, zoom = 4) |>\n  addProviderTiles(\"Esri.WorldGrayCanvas\",\n                   options = tileOptions(maxZoom = 12)) |>\n  setMaxBounds(\n    lng1 = -153.8,\n    lat1 = -25.2,\n    lng2 = 176.7,\n    lat2 = 63.5\n  ) |>\n  addMarkers(\n    ~ longitude,\n    ~ latitude,\n    label = ~ labelText,\n    labelOptions = labelOptions(maxWidth = 50),\n    icon = taylorIcon\n  ) |>\n  addEasyButton(easyButton(\n    icon = \"fa-search-plus\",\n    title = \"Zoom In\",\n    onClick = JS(\"function(btn, map) { map.zoomIn(); }\")\n  )) |>\n  addEasyButton(easyButton(\n    icon = \"fa-search-minus\",\n    title = \"Zoom Out\",\n    onClick = JS(\"function(btn, map) { map.zoomOut(); }\")\n  )) |>\n  suspendScroll(wakeMessage = \"Drag to move the map\") |>\n  addResetMapButton()\n```\n:::\n\n\n::::\n:::\n\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}