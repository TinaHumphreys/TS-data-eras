{
  "hash": "9458754bf6d0f7a9e1fb98d638ee15a0",
  "result": {
    "engine": "knitr",
    "markdown": "---\noutput: html_document\n---\n\n\n<details><summary>See R code</summary>\n\n:::{.rcode}\n::::{.rcode-header}\nR Code: Taylor Tour Gross Treemap\n::::\n::::{.rcode-container}\n\nFirst, we load the packages that we will need.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To clean data\nlibrary(tidyverse)\nlibrary(janitor)\n\n# To scrape data\nlibrary(rvest)\nlibrary(httr)\nlibrary(polite)\n\n# To visualize data\nlibrary(ggplot2)\nlibrary(showtext)\nlibrary(treemapify)\nlibrary(cowplot)\n\nfont_add_google(\"Abril Fatface\", \"abril-fatface\")\nfont_add_google(\"Lato\", \"lato\")\n\nshowtext::showtext_auto()\n```\n:::\n\n\nBelow, we extract information about Taylor Swift's live performances from a Wikipedia page. The code begins by defining the URL of the page. The HTML content is then scraped and specific tables with the class \"wikitable\" are selected and converted into a data frame (`ind_tab`). We go through a few cleaning steps, including renaming columns, converting certain columns to numeric format, and adjusting values for specific tours. Additionally, the code creates new columns for labels and images associated with each tour, incorporating HTML styling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <-\n  \"https://en.wikipedia.org/wiki/List_of_Taylor_Swift_live_performances\"\n\nurl_bow <- polite::bow(url)\nurl_bow\n\nind_html <-\n  scrape(url_bow) |>\n  html_nodes(\"table.wikitable\") |>\n  html_table(fill = TRUE)\n\nind_tab <-\n  ind_html[[1]] |>\n  janitor::clean_names() |>\n  mutate(across(\n    c(adjusted_gross_in_2023_dollar,\n      gross,\n      attendance),\n    ~ as.numeric(str_replace_all(.x, \"[$,]\", \"\"))\n  )) |>\n  mutate(\n    attendance = case_when(title == \"The Eras Tour\" ~ 10512000,\n                           .default = attendance),\n    gross = case_when(title == \"The Eras Tour\" ~ 2400000000,\n                      .default = gross),\n    adjusted_gross_in_2023_dollar = case_when(title == \"The Eras Tour\" ~ 2400000000,\n                                              .default = adjusted_gross_in_2023_dollar),\n    label = paste0(\n      title,\n      \"<br><span style='font-size:20pt'>\",\n      scales::dollar(adjusted_gross_in_2023_dollar),\n      \"</span>\"\n    ),\n    # To make the Fearless rectangle a little bigger and The Eras Tour font a little small\n    adjusted_gross_in_2023_dollar2 = case_when(\n      title == \"Fearless Tour\" ~ adjusted_gross_in_2023_dollar * 1.5,\n      title == \"The Eras Tour\" ~ adjusted_gross_in_2023_dollar * 0.9,\n      .default = adjusted_gross_in_2023_dollar\n    )\n  )\n```\n:::\n\n\nNow, we create a treemap visualization using the {treemapify} package to represent Taylor Swift's live performances based on adjusted gross income in 2023 dollars. We start by generating a treemap using the `treemapify()` function, where the area of each rectangle corresponds to the adjusted gross income. The resulting treemap is then joined back to the original data frame (`ind_tab`) to include additional details.\n\nThe code calculates the total adjusted gross income for all performances and creates a new treemap (`taylor_treemap`) using {ggplot2.} The treemap is customized with color-coded rectangles representing different tours, and the label for each rectangle includes the tour name and its adjusted gross income in billion dollars.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap <-\n  treemapify(ind_tab, area = \"adjusted_gross_in_2023_dollar\")\n\ntreemap <-\n  left_join(ind_tab, treemap |> select(title, ymax:xmax))\n\ntotal <- sum(ind_tab$adjusted_gross_in_2023_dollar)\n\ntaylor_treemap <-\n  treemap |>\n  ggplot(\n    aes(\n      area = adjusted_gross_in_2023_dollar2,\n      fill = title,\n      label = paste(\n        title,\n        scales::dollar(\n          adjusted_gross_in_2023_dollar,\n          scale = 1e-9,\n          suffix = \"B\"\n        ),\n        sep = \"\\n\"\n      ),\n      xmin = xmin,\n      ymin = ymin,\n      xmax = xmax,\n      ymax = ymax\n    )\n  ) +\n  geom_treemap() +\n  draw_image(\n    here::here(\"images\", \"rev-by-tour-bg.png\"),\n    scale = 1.5,\n    x = 0,\n    y = 0.16\n  ) +\n  geom_treemap_text(\n    colour = \"white\",\n    place = \"center\",\n    grow = TRUE,\n    reflow = FALSE,\n    family = \"abril-fatface\"\n  ) +\n  labs(\n    title = scales::dollar(\n      total,\n      big.mark = \".\",\n      scale = 1e-9,\n      suffix = \"B\"\n    ),\n    sep = \"\\n\"\n  ) +\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      size = 90,\n      family = \"abril-fatface\",\n      hjust = 0.5,\n      color = \"#1D1E3C\"\n    )\n  )\n```\n:::\n\n\nThe ggsave function from the ggplot2 package saves the composite plot (`taylor_treemap`) as a PNG image.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\n  filename = here::here(\"images\", \"taylor_treemap.png\"),\n  plot = taylor_treemap,\n  device = png,\n  path = NULL,\n  width = 10,\n  height = 6.5,\n  units = \"in\",\n  dpi = 300,\n  limitsize = TRUE,\n  bg = \"white\"\n)\n```\n:::\n\n\n::::\n:::\n\n</details>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}