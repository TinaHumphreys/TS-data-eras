{
  "hash": "abbc66fef504e915ff6618e969b55dfa",
  "result": {
    "markdown": "<details><summary>See R code</summary>\n\n::: {.callout-tip}\n## The Eras Tour Dates and Venues\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To clean data\nlibrary(tidyverse)\nlibrary(janitor)\n\n# To scrape data\nlibrary(rvest)\nlibrary(httr)\nlibrary(polite)\n\n# To geocode data\nlibrary(tidygeocoder)\n\n# To visualize data\nlibrary(leaflet)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nurl_map <-\n  \"https://www.sportskeeda.com/pop-culture/taylor-swift-2023-the-eras-tour-ticket-cities-and-dates\"\n\nurl_map_bow <- polite::bow(url_map)\nurl_map_bow\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<polite session> https://www.sportskeeda.com/pop-culture/taylor-swift-2023-the-eras-tour-ticket-cities-and-dates\n    User-agent: polite R package\n    robots.txt: 41 rules are defined for 4 bots\n   Crawl delay: 5 sec\n  The path is scrapable for this user-agent\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_html <-\n  polite::scrape(url_map_bow) |>  # scrape web page\n  rvest::html_nodes(\"tbody\") |> # pull out specific table\n  rvest::html_table(fill = TRUE) |>\n  bind_rows() |>\n  row_to_names(row_number = 1) |>\n  clean_names()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_html_geocode <-\n  map_html |>\n  geocode(venue,\n          method = \"osm\",\n          lat = latitude ,\n          long = longitude)\n\nmap_html_geo <-\n  map_html_geocode |>\n  mutate(\n    latitude = case_when(\n      venue == \"Empower Field at Mile Hi\" ~ 39.74359,\n      venue == \"Johan Cruyff Arena\" ~ 52.3143,\n      .default = latitude\n    ),\n    longitude = case_when(\n      venue == \"Empower Field at Mile Hi\" ~ -105.01968,\n      venue == \"Johan Cruyff Arena\" ~ 4.94187,\n      .default = longitude\n    )\n  ) |>\n  mutate(number_shows = n(),\n         .by = c(venue, city)) |>\n  mutate(occurred = case_when(lubridate::mdy(paste0(date, year)) < today() ~ \"Occurred\",\n                              .default = \"Not Occurred\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `mutate()`.\nâ„¹ In argument: `occurred = case_when(...)`.\nCaused by warning:\n!  24 failed to parse.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npal <- colorFactor(\n  palette = c(\"#823549\", \"#1D1F38\"),\n  domain = map_html_geo$occurred\n)\n\nleaflet() |>\n  addProviderTiles(\"Stadia.AlidadeSmooth\",\n                   options = (noWrap = TRUE)) |>\n  setMaxBounds(\n    lng1 = 180,\n    lat1 = 90,\n    lng2 = -180,\n    lat2 = -90\n  ) |> \n  addCircleMarkers(\n    data = map_html_geo,\n    color = ~pal(occurred),\n    label = paste(\n      \"Venue: \",\n      map_html_geo$venue,\n      \"<br>\",\n      \"City: \",\n      map_html_geo$city,\n      \"<br>\",\n      \"Number of Shows: \",\n      map_html_geo$number_shows\n    ) |>\n      lapply(htmltools::HTML)\n  ) |> \n  addLegend(\"bottomright\", pal = pal, values = map_html_geo$occurred,\n    title = \"Event Status\",\n    opacity = 1\n  )\n```\n:::\n\n\n:::\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}