{
  "hash": "a2d1f8314e1369b2aeb6eb0df0d4d069",
  "result": {
    "markdown": "---\noutput: html_document\neditor_options: \n  chunk_output_type: console\n---\n\n<details><summary>See R code</summary>\n\n::: {.callout-tip}\n## The Eras Tour Dates and Venues\n\nLet's get started by loading the necessary R packages to clean, scrape, and visualize the data. These packages are the building blocks of our data scraping journey.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To clean data\nlibrary(tidyverse)\nlibrary(janitor)\n\n# To scrape data\nlibrary(rvest)\nlibrary(httr)\nlibrary(polite)\n\n# To geocode data\nlibrary(tidygeocoder)\nlibrary(lubridate)\n\n# To visualize data\nlibrary(leaflet)\n```\n:::\n\n\nNow that we have the needed libraries let's politely scrape data from Wikipedia and bring it into R. We'll start by specifying the URL of the Wikipedia page we want to extract data from:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl_map <-\n  \"https://www.sportskeeda.com/pop-culture/taylor-swift-2023-the-eras-tour-ticket-cities-and-dates\"\n\nurl_map_bow <- polite::bow(url_map)\nurl_map_bow\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<polite session> https://www.sportskeeda.com/pop-culture/taylor-swift-2023-the-eras-tour-ticket-cities-and-dates\n    User-agent: polite R package\n    robots.txt: 41 rules are defined for 4 bots\n   Crawl delay: 5 sec\n  The path is scrapable for this user-agent\n```\n\n\n:::\n:::\n\n\nNow, let's extract and clean up our table. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_html <-\n  polite::scrape(url_map_bow) |>  # scrape web page\n  rvest::html_nodes(\"tbody\") |> # pull out specific table\n  rvest::html_table(fill = TRUE) |>\n  bind_rows() |>\n  row_to_names(row_number = 1) |> # set the first row to column headers\n  clean_names()\n```\n:::\n\n\nNow we want to geocode the locations in our table. We have a number of cities and venues, but where exactly are they located on a map? We'll use the `geocode` function from the `tidygeocoder` package. Given these, it will return the geolocation, latitude and longitude based a specified geocoding service. We'll use `osm` for Open Street Map. \n\nAfter that, we'll clean up our table a bit more. We'll note how many shows happen at each location and indicate whether those shows have happened yet. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_html_geocode <-\n  map_html |>\n  geocode(venue,\n          method = \"osm\",\n          lat = latitude ,\n          long = longitude)\n\n# A few geolocation appear incorrect. Let's correct them manually. \nmap_html_geo <-\n  map_html_geocode |>\n  mutate(\n    latitude = case_when(\n      venue == \"Empower Field at Mile Hi\" ~ 39.74359,\n      venue == \"Johan Cruyff Arena\" ~ 52.3143,\n      .default = latitude\n    ),\n    longitude = case_when(\n      venue == \"Empower Field at Mile Hi\" ~ -105.01968,\n      venue == \"Johan Cruyff Arena\" ~ 4.94187,\n      .default = longitude\n    )\n  ) |>\n  mutate(\n    number_shows = n(),\n    .by = c(venue, city)) |>\n  mutate(\n    date = case_when(\n      date == \"March 18 (6:30 PM)\" ~ \"March 18\",\n      date == \"March 18 (12 PM)\" ~ \"March 18\",\n      .default = date\n    ),\n    date =  lubridate::mdy(paste0(date, \" \", year))\n  ) |> \n  mutate(\n    occurred = case_when(\n     date < today() ~ \"Occurred\",\n      date > today() ~ \"Not Occurred\",\n      .default = \"NA\"))\n```\n:::\n\n\n\nNow let's use Leaflet to map all these shows and their venues. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up the colors for our map markers\npal <- colorFactor(\n  palette = c(\"#823549\", \"#1D1F38\"),\n  domain = map_html_geo$occurred\n)\n\nleaflet(options = leafletOptions(zoomControl = FALSE)) |>\n  addProviderTiles(\"Esri.WorldGrayCanvas\",\n                   options = (noWrap = TRUE)) |>\n  setMaxBounds(\n    lng1 = 180,\n    lat1 = 90,\n    lng2 = -180,\n    lat2 = -90\n  ) |> \n  addCircleMarkers(\n    data = map_html_geo,\n    color = ~pal(occurred),\n    label = paste(\n      \"Venue: \",\n      map_html_geo$venue,\n      \"<br>\",\n      \"City: \",\n      map_html_geo$city,\n      \"<br>\",\n      \"Number of Shows: \",\n      map_html_geo$number_shows\n    ) |>\n      lapply(htmltools::HTML)\n  ) |> \n  addLegend(\"bottomright\", pal = pal, values = map_html_geo$occurred,\n            title = \"Event Status\",\n            opacity = 1\n  )\n```\n:::\n\n\n:::\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}