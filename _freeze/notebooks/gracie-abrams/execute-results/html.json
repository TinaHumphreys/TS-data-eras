{
  "hash": "e9933e78458400a3ec06456a3d3da046",
  "result": {
    "markdown": "::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr)\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(tidyr)\n\nurl <-\n  \"https://api.songstats.com/enterprise/v1/artists/historic_stats\"\n\nqueryString <- list(\n  source = \"all\",\n  songstats_artist_id = \"so4cd0bt\",\n  start_date = \"2020-01-01\"\n)\n\nresponse <-\n  VERB(\n    \"GET\",\n    url,\n    query = queryString,\n    add_headers(\n      'Accept-Encoding' = '',\n      'apikey' = Sys.getenv('SONGSTATS_TOKEN')\n    ),\n    content_type(\"application/octet-stream\"),\n    accept(\"application/json\")\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngracie_abrams <- content(response, \"text\")\n\ngracie_abrams_tibble <-\n  gracie_abrams |> \n  jsonlite::fromJSON() |> \n  map_if(is.data.frame, list) |> \n  as.data.frame() |> \n  unnest_wider(stats.data) |> \n  unnest(history) |> \n  mutate(time_frame = case_when(date < \"2022-11-01\" ~ \"before announcement\",\n                                .default = \"after announcement\"),\n         artist = \"gracie_abrams\")\n\nreadr::write_rds(gracie_abrams_tibble, \"gracie_abrams_tibble.Rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  gracie_abrams_tibble_dat |> filter(stats.source == \"shazam\"),\n  aes(x = as.Date(date), y = shazams_total)\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\",\n              aes(color = time_frame))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}