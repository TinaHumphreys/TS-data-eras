{
  "hash": "8be66d128bd67d53564b51405adbe8fc",
  "result": {
    "markdown": "---\ntitle: \"Taylor Swift vs Other Tours\"\nformat: \n  html:\n    fig-width: 10\n    fig-height: 8\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# data loading and manipulation\nlibrary(tidyverse)\n\n# data visualization  \nlibrary(ggplot2)\nlibrary(scales)\nlibrary(glue)\nlibrary(ggsankey) # get at https://github.com/davidsjoberg/ggsankey\nlibrary(ggtext)\nlibrary(colorspace)\nlibrary(ggh4x)\nlibrary(showtext)\n\nfont_add_google(\"Abril Fatface\", \"abril-fatface\")\nfont_add_google(\"Lato\", \"lato\")\n\nshowtext::showtext_auto()\n```\n:::\n\n\nBorrowing heavily from [Georgios Karamanis'](https://www.linkedin.com/in/georgios-karamanis-a54926153/) [#TidyTuesday post, where he shared an alluvial bump chart made with {ggsankey} with data from UNHCR, the UN Refugee Agency](https://www.linkedin.com/posts/georgios-karamanis-a54926153_tidytuesday-rstats-dataviz-activity-7101468916958322688-7UxN) The heaviest lift came from [{`ggsankey`}, the R Package for making beautiful sankey, alluvial and sankey bump plots in ggplot2](https://github.com/davidsjoberg/ggsankey)\n\nFirst, we're going to load our data, collected manually from Pollstar reporting over the last 20 years. Artist names need to be cleaned up, and we need to structure our dataset for the Sankey Bump plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrank_concert_tours <- read_csv(here::here(\"data\", \"rank_concert_tours.csv\")) |> \n  mutate(\n    artist = case_when(\n      artist == \"Tim McGraw/Faith Hill\"  ~ \"Tim Mcgraw et. al.\",\n      artist == \"Tim McGraw / Faith Hill\"  ~ \"Tim Mcgraw et. al.\",     \n      artist == \"Kenny Chesney & Tim Mcgraw\"  ~ \"Tim Mcgraw et. al.\",     \n      artist == \"Michael Jackson The Immortal World Tour By Cirque Du Soleil\"  ~ \"Michael Jackson\",\n      artist == \"Bruce Springsteen & The E Street Band\"  ~ \"Bruce Springsteen & the E Street Band\",\n      artist == \"Jay-Z / Beyoncé\"   ~ \"Beyoncé & Jay Z\",\n      artist == \"Beyoncé and Jay Z\" ~ \"Beyoncé & Jay Z\",\n      artist == \"Billy Joel/Elton John\"  ~ \"Billy Joel & Elton John\"  ,\n      artist == \"“Summer Sanitarium Tour”/Metallica\"  ~ \"Metallica\",\n      artist == \"'N Sync\"  ~ \"Nsync\",\n      .default = artist\n    )\n  )\n\nfor (YEAR in unique(rank_concert_tours$year)){\n  # print(as.character(YEAR))\n  \n  year_tbl <- rank_concert_tours |> \n    filter(year == YEAR)\n  \n  add_tbl <- tibble(\n    year = YEAR,\n    artist = (rank_concert_tours$artist |> unique())[!(rank_concert_tours$artist |> unique() %in% year_tbl$artist)],\n    gross = 1\n  )\n  add_tbl$rank <- 11:(nrow(add_tbl)+10)\n  \n  year_tbl <- year_tbl |> \n    bind_rows(\n      add_tbl\n    )\n  \n  rank_concert_tours <- year_tbl |> \n    bind_rows(\n      rank_concert_tours |> \n        filter(year != YEAR)\n    )\n  \n}\n\nrank_concert_tours <- tibble(rank_concert_tours) |> \n  arrange(year, rank)\n```\n:::\n\n\nNow, let's use `ggplot`, `ggsankey` to build this plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set text and position of major artist and tour annotation. \nannot <- tribble(\n  ~artist, ~x, ~y, ~total, ~note,\n  \"Taylor Swift\",2019, 2800, 2200000000,\"Projected\",\n  \"U2\", 2014, 2100, 316000000,\"in 2017\",\n  \"The Rolling Stones\",2003.5, 1400,1216000000,\"between 2013-2023\",\n  \"Bruce Springsteen & the E Street Band\",2011,1700,268300000,\"in 2016\",\n  \"Ed Sheeran\",2017,2400,768200000,\"between 2017-2019\"\n) |> rowwise() |> \n  mutate(\n    label = glue(\"**{artist}**<br>{scales::dollar(total)} {note}\")\n  )\n\nf1 <- \"Lato\"\nf2 <- \"Abril Fatface\"\n\nrank_concert_tours |> \n  ggplot( ) +\n  # create Sankey bump plot\n  geom_sankey_bump(\n    aes(\n      x = year, \n      node = artist, \n      fill = ifelse(artist %in% annot$artist, artist, NA),\n      value = gross,\n      color = after_scale(colorspace::lighten(fill, 0.4))\n    ), \n    linewidth = 0.3, \n    type = \"alluvial\", \n    space = 0, \n    alpha = 0.9\n  ) +\n  # Labels for top artists\n  ggtext::geom_richtext(\n    data = annot, \n    aes(\n      x = x, \n      y = y, \n      label = label, \n      color = artist,\n    ), \n    size = 5,\n    vjust = 0, \n    family = f1, \n    fill = NA, \n    label.color = NA) + \n  # More labels\n  annotate(\"text\", x = 2023.2, y = 1000, label = \"Mid-Year\\nTotal\\nfor Other\\nArtists↓\", family = f1, hjust = 0, vjust = 1, color = \"grey30\") +\n  # Title and subtitle\n  annotate(\"text\", x = 2000, y = 3600, label = \"How does Taylor Swift's Eras Tour Compare to Others?\", size = 8, family = f2, fontface = \"bold\", hjust = 0, color = \"#181716\") +\n  annotate(\"text\", x = 2000, y = 3450, label = str_wrap(\"This plot shows rankings and revenue from each year's top ten international music tours between 2000 and 2023.\\nOther top tours & artists are highlighted. \", 60), \n           size = 5.5, family = f1, hjust = 0, vjust = 1, color = \"#393433\",\n           lineheight = .9) +\n  \n  # Scales, coord, theme\n  scale_x_continuous(\n    limits = c(2000,2024),\n    breaks = seq(2002, 2022, 2),\n    minor_breaks = NULL, \n    guide = \"axis_minor\") +\n  scale_y_continuous(\n    labels = unit_format(\n      prefix = \"$\",\n      unit = \"Billion\", \n      scale = 1e-3),\n    limits = c(0,3700),\n    minor_breaks = NULL\n  ) +\n  scale_fill_manual(values = c(\"#0041CC\", \"#e17d17\", \"#CE1126\", \"#A713CC\",\"#38C754\"), na.value = \"grey80\") +\n  scale_color_manual(values = c(\"#0041CC\", \"#e17d17\", \"#CE1126\", \"#A713CC\",\"#38C754\"), na.value = \"grey80\") +\n  scale_size_continuous(range = c(4, 6)) +\n  coord_cartesian(clip = \"off\", expand = FALSE) +\n  labs(\n    caption = \"Source: Pollstar\"\n  ) +\n  theme_minimal(\n    base_family = f1\n  ) +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"#FFFFFE\", color = NA),\n    axis.title = element_blank(),\n    axis.text = element_text(size = 12, margin = margin(5, 0, 0, 0), family = f1, color = \"#393433\"),\n    # axis.ticks.x = element_line(color = \"grey70\"),\n    # ggh4x.axis.ticks.length.minor = rel(1),\n    plot.margin = margin(20, 75, 30, 35),\n    plot.caption = element_text(margin = margin(10, 500, 0, 0))\n  )\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}