{
  "hash": "0701a65fc0217eebb88c4263e3b1aaa7",
  "result": {
    "markdown": "---\noutput: html_document\n---\n\n\n<details><summary>See R code</summary>\n\n:::{.goals}\n::::{.goals-header}\nR Code: The Eras Tour Openers - Value Boxes\n::::\n::::{.goals-container}\n\nThis code creates plots and value boxes for the Taylor Swift opening acts section. The data to create these visualizations were granted to us under license. We may not be able to share it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(shiny)\nlibrary(bslib)\nlibrary(glue)\nlibrary(bsicons)\n\nopeners <-\n  read_rds(here::here(\"secret-data\", \"combined_artist_data.rds\")) |> \n  filter(artist != \"Taylor Swift\") |> \n  mutate(date = as.Date(date)) |> \n  filter(date > as.Date(\"2022-01-01\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(openers |>\n                  filter(stats.source == \"shazam\",\n                         date > as.Date(2022-01-01)),\n                aes(x = as.Date(date), y = shazams_total)) +\n  geom_point() +\n  geom_smooth(method = \"lm\",\n              aes(color = time_frame)) +\n  facet_wrap( ~ artist, scales = \"free\")\n```\n:::\n\n\nBelow, we create a single artist's set of plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyt_color <- \"#F9A395\"\nyt_text_color <- \"#7C1A03\"\n\nspotify_color <- \"#ADBF99\"\nspotify_text_color <- \"#3B4F29\"\n\nshazam_color <- \"#A2B8CB\"\nshazam_text_color <- \"#213D4F\"\n\nvbs_artists <- list()\n\n# Iterate through all the artists\nfor (i in 1:length(openers$artist |> unique())){\n  artist_i <- (openers$artist |> unique())[i]\n  \n  # Shazam\n  \n  p_shazam <- openers |> \n    filter(stats.source == \"shazam\",\n           date > as.Date(2022-01-01)) |>\n    filter(artist == artist_i) |> \n    mutate(date = as.Date(date)) |>\n    rename(Date = date,\n           Shazams = shazams_total,\n           \"Time Frame\" = time_frame) |> \n    ggplot(aes(x = Date, \n               y = Shazams,\n               text = NULL)) +\n    geom_line(\n      color= \"white\",\n      size = 1.4\n    ) +\n    geom_smooth(\n      xmethod = \"lm\",\n      aes(color = `Time Frame`),\n      se = FALSE,\n      size = 0.7) +\n    scale_color_manual(\n      values=c(`after announcement`=\"#823549\", `before announcement`=\"#1D2642\")) +\n    theme(\n      axis.text.x = element_text(colour=\"white\"),\n      axis.title = element_text(colour=\"white\")\n    )\n  \n  sparkline_shazam <- p_shazam |> \n    ggplotly(\n    ) |>\n    config(displayModeBar = F) |> \n    layout(\n      showlegend = FALSE,\n      xaxis = list(visible = F, showgrid = F, title = \"\"),\n      yaxis = list(visible = F, showgrid = F, title = \"\"),\n      hovermode = \"none\",\n      margin = list(t = 0, r = 0, l = 0, b = 0),\n      font = list(color = \"white\"),\n      paper_bgcolor = \"transparent\",\n      plot_bgcolor = \"transparent\"\n    ) |> \n    htmlwidgets::onRender(\n      \"function(el) {\n      var ro = new ResizeObserver(function() {\n         var visible = el.offsetHeight > 200;\n         Plotly.relayout(el, {'xaxis.visible': visible, hovermode: visible,});\n      });\n      ro.observe(el);\n    }\"\n    )\n  \n  \n  \n  shazams_total = (openers |> \n                     filter(\n                       artist == artist_i,\n                       source_ids == \"shazam\") |> \n                     arrange(desc(date)) |> \n                     slice(1))$shazams_total |> \n    formatC(big.mark=\",\")\n  \n  \n  # YouTube\n  \n  p_yt <- openers |> \n    filter(\n      stats.source == \"youtube\",\n      date > as.Date(2022-01-01)\n    ) |>\n    filter(\n      artist == artist_i\n    ) |> \n    mutate(\n      video_views_total_2 = video_views_total,\n      date = as.Date(date)\n    ) |>\n    rename(\n      Date = date,\n      YouTube = video_views_total,\n      \"Time Frame\" = time_frame\n    ) |> \n    ggplot(\n      aes(\n        x = Date, \n        y = YouTube\n      ) \n    ) +\n    geom_line(\n      color= \"white\",\n      size = 1.4\n    ) +\n    geom_smooth(\n      xmethod = \"lm\",\n      aes(color = `Time Frame`\n      ),\n      se = FALSE,\n      size = 0.7) +\n    scale_y_continuous(trans='log2') +\n    scale_color_manual(\n      values=c(`after announcement`=\"#823549\", `before announcement`=\"#1D2642\")) +\n    theme(\n      axis.text.x = element_text(colour=\"white\"),\n      axis.title = element_text(colour=\"white\")\n    )\n  \n  sparkline_yt <- p_yt |> \n    ggplotly(\n    ) |>\n    config(displayModeBar = F) |> \n    layout(\n      showlegend = FALSE,\n      xaxis = list(visible = F, showgrid = F, title = \"\"),\n      yaxis = list(visible = F, showgrid = F, title = \"\"),\n      hovermode = \"none\",\n      margin = list(t = 0, r = 0, l = 0, b = 0),\n      font = list(color = \"white\"),\n      paper_bgcolor = \"transparent\",\n      plot_bgcolor = \"transparent\"\n    ) |> \n    htmlwidgets::onRender(\n      \"function(el) {\n      var ro = new ResizeObserver(function() {\n         var visible = el.offsetHeight > 200;\n         Plotly.relayout(el, {'xaxis.visible': visible, hovermode: visible,});\n      });\n      ro.observe(el);\n    }\"\n    )\n  \n  sparkline_yt$data[[1]]$hoverinfo='none'\n  \n  yt_subs = (openers |> \n               filter(\n                 artist == artist_i,\n                 source_ids == \"youtube\") |> \n               arrange(desc(date)) |> \n               slice(1))$subscribers_total |> \n    prettyNum(big.mark=\",\")\n  yt_views <- (openers |> \n                 filter(\n                   artist == artist_i,\n                   source_ids == \"youtube\") |> \n                 arrange(desc(date)) |> \n                 slice(1))$video_views_total |> \n    prettyNum(big.mark=\",\")\n  \n  # Spotify\n  \n  p_spotify <- openers |> \n    filter(\n      stats.source == \"spotify\",\n      date > as.Date(2022-01-01)\n    ) |>\n    filter(\n      artist == artist_i\n    ) |> \n    mutate(\n      date = as.Date(date)\n    ) |>\n    rename(\n      Date = date,\n      `Monthly Listeners` = monthly_listeners_current,\n      \"Time Frame\" = time_frame\n    ) |> \n    ggplot(\n      aes(x = Date, \n          y = `Monthly Listeners`,\n          text = NULL\n      )\n    ) +\n    geom_line(\n      color= \"grey90\",\n      size = 1.4\n    ) +\n    geom_smooth(\n      xmethod = \"lm\",\n      aes(color = `Time Frame`),\n      se = FALSE,\n      size = 0.7) +\n    scale_color_manual(\n      values=c(`after announcement`=\"#823549\", `before announcement`=\"#1D2642\")) +\n    theme(\n      axis.text.x = element_text(colour=\"white\"),\n      axis.title = element_text(colour=\"white\")\n      \n    )\n  \n  sparkline_spotify <- p_spotify |> \n    ggplotly(\n    ) |>\n    config(displayModeBar = F) |> \n    layout(\n      showlegend = FALSE,\n      xaxis = list(\n        visible = F, \n        showgrid = F\n      ),\n      yaxis = list(visible = F, showgrid = F, title = \"\"),\n      hovermode = \"none\",\n      margin = list(t = 0, r = 0, l = 0, b = 0),\n      font = list(color = \"white\"),\n      paper_bgcolor = \"transparent\",\n      plot_bgcolor = \"transparent\"\n    ) |> \n    htmlwidgets::onRender(\n     \"function(el) {\n      var ro = new ResizeObserver(function() {\n         var visible = el.offsetHeight > 200;\n         Plotly.relayout(el, {'xaxis.visible': visible, hovermode: visible});\n      });\n      ro.observe(el);\n    }\"\n\n    )\n  \n  spotify_total = (openers |> \n                     filter(\n                       artist == artist_i,\n                       source_ids == \"spotify\") |> \n                     arrange(desc(date)) |> \n                     slice(1))$followers_total |> \n    formatC(big.mark=\",\")\n  \n  \n  # create our value boxes\n  \n  vbs_artists[[artist_i]] <- list(\n    \n    # value_box(\n    #   title = \"Artist\",\n    #   value = h3(glue(\"{artist_i}\")),\n    #   p(),\n    #   showcase = bs_icon(\"music-note-beamed\"),\n    #   style = 'background-color: #3dadad!important;'\n    # ),\n    value_box(\n      title = \"YouTube subscribers\",\n      h3(glue(\"{yt_subs}\")),\n      hr(),\n      h3(glue(\"{yt_views}\")),\n      p(\"Total Views\"),\n      hr(),\n      p(\"Plot shows total channel views, Jan 2022 to Oct 2023\"),\n      showcase = sparkline_yt,\n      full_screen = TRUE,\n      style = glue(\n        'background-color: {yt_color}!important;\n        color: {yt_text_color}!important;')\n    ),\n    value_box(\n      title = \"Shazam Total Plays\",\n      value = h3(glue(\"{shazams_total}\")),\n      p(),\n      p(\"Plot shows total Shazams\"),\n      p(\"Between Jan 2022 & Oct 2023\"),\n      showcase = sparkline_shazam,\n      full_screen = TRUE,\n      style = glue(\n        'background-color: {shazam_color}!important;\n        color: {shazam_text_color}!important;')\n    ),\n    value_box(\n      title = \"Spotify Total Followers\",\n      value = h3(glue(\"{spotify_total}\")),\n      p(),\n      p(\"Plot shows monthly listeners\"),\n      p(\"Between Jan 2022 & Oct 2023\"),\n      showcase = sparkline_spotify,\n      full_screen = TRUE,\n      style = glue(\n        'background-color: {spotify_color}!important;\n        color: {shazam_text_color}!important;')\n    )\n  )\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlayout_column_wrap(\n  width = \"300px\",\n  !!!vbs_artists[[artist_i]]\n)\n\nsaveRDS(\n  vbs_artists,\n  here::here(\"data\", \"vbs_artists.RDS\")\n) \n```\n:::\n\n\n::::\n:::\n\n</details>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}